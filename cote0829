class Solution {
    public long solution(int r1, int r2) {
        long sum = 0;
        for (int x=1; x <r2; x++) {                              //x의 범위를 1사분면으로 한정하여 연산을 최소화 (후에 *4를 하면 전체 개수)
            double y1 = Math.sqrt((double)r1*r1 -(double)x*x);    //원 방정식 y = √(r*r-x*xx)를 이용하여 두 원의 y값 구하기
            double y2 = Math.sqrt((double)r2*r2 -(double)x*x);    //r1*r1, x*x는 파라미터값이 커지면 int로 담을수 없으므로 강제 형 변환 (long으로 바꿨으면 좋았을 것)
            
            y1 = Math.ceil(y1);                                  //두 실수 사이의 정수를 구하기위해 작은수는 올림 큰수는 내림처리하여
            y2 = Math.floor(y2);                                 //일반적인 두 정수사이의 정수 구하는 식을 사용할수 있게 만듦
            
            if (x >= r1)                                         //x가 r1보다 커질경우 작은원의 y값이 없기때문에 1사분면 한정으로
                y1 = 1;                                          //큰 원 안의 좌표개수를 구하기위해 y1을 1로초기화

            sum += y2-y1+1;                                      //두 y값 사이의 정수 개수를 sum에 누적연산
            
        }
        
        return sum*4 + (r2-r1+1)*4;                              //위에서 구한 값 *4 + 양의y축위의 좌표 개수 *4
    }
}

//첫 시도시 이중 포문을 이용하여 x,y의 좌표 범위를 -r2~r2지정하여
//각 좌표와 원점사이의 거리가 r1, r2사이의값일경우를 구하였으나
//연산속도가 너무 오래걸려 파라미터에 큰 수가 들어올경우 실패하였음

//*연산 사용시 값이 기하급수로 올라가기떄문에 변수 타입에 주의해야함
